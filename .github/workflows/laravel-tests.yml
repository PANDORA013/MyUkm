name: Laravel Tests

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  schedule:
    # Run every day at midnight UTC
    - cron: '0 0 * * *'

jobs:
  laravel-tests:
    name: PHP ${{ matrix.php-version }} - Laravel ${{ matrix.laravel-version }}
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        php-version: ['8.2']
        laravel-version: ['^10.0']
        include:
          - php-version: '8.2'
            dependency-version: '*'

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: myukm_test
          MYSQL_USER: root
          MYSQL_PASSWORD: root
          MYSQL_ROOT_HOST: '%'
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h localhost -u root -proot" --health-interval=10s --health-timeout=5s --health-retries=10 --health-start-period=30s

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, pdo, mysql, bcmath, dom, fileinfo, ctype, json, tokenizer, xml, gd, zip, intl
          coverage: none
          tools: composer:v2
          
      - name: Verify PHP version
        run: php -v

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Cache NPM packages
        id: npm-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Copy .env
        run: |
          cp .env.example .env
          # Generate app key
          php artisan key:generate --show
          php artisan key:generate
          # Set debug mode
          echo "APP_DEBUG=true" >> .env
          echo "LOG_CHANNEL=stderr" >> .env

      - name: Configure Environment
        run: |
          # Database Configuration
          echo "DB_CONNECTION=mysql" > .env.testing
          echo "DB_HOST=127.0.0.1" >> .env.testing
          echo "DB_PORT=3306" >> .env.testing
          echo "DB_DATABASE=myukm_test" >> .env.testing
          echo "DB_USERNAME=root" >> .env.testing
          echo "DB_PASSWORD=root" >> .env.testing
          
          # Copy to .env for backward compatibility
          cp .env.testing .env
          
          # Testing Environment
          echo "APP_ENV=testing" >> .env
          
          # Cache and Session Configuration
          echo "CACHE_DRIVER=array" >> .env
          echo "QUEUE_CONNECTION=sync" >> .env
          echo "SESSION_DRIVER=array" >> .env
          echo "SESSION_LIFETIME=120" >> .env
          
          # Mail Configuration
          echo "MAIL_MAILER=array" >> .env
          
          # Broadcasting Configuration
          echo "BROADCAST_DRIVER=null" >> .env
          
          # Dummy Pusher Credentials (to prevent null errors)
          echo "PUSHER_APP_ID=test" >> .env
          echo "PUSHER_APP_KEY=test" >> .env
          echo "PUSHER_APP_SECRET=test" >> .env
          echo "PUSHER_APP_CLUSTER=mt1" >> .env
          
          # Disable Pusher service provider for tests
          sed -i "s/App\\Providers\\BroadcastServiceProvider::class,//g" config/app.php
          
          # Show configuration for debugging
          echo "=== .env ==="
          cat .env
          echo "\n=== Database Configuration ==="
          php artisan db:show
          
      - name: Install Dependencies
        env:
          BROADCAST_DRIVER: null
          CACHE_DRIVER: array
          QUEUE_CONNECTION: sync
          SESSION_DRIVER: array
        run: |
          composer install --prefer-dist --no-progress --no-suggest --no-interaction --optimize-autoloader
          
      - name: Install NPM Dependencies
        run: |
          npm ci
          
      - name: Build Assets
        run: |
          npm run build

      - name: Check Database Connection
        run: |
          echo "Checking MySQL connection..."
          for i in {1..10}; do
            if mysql -h 127.0.0.1 -u root -proot -e "SELECT 1" > /dev/null 2>&1; then
              echo "✅ MySQL is ready!"
              exit 0
            fi
            echo "⏳ Waiting for MySQL to be ready... (attempt $i/10)"
            sleep 3
          done
          echo "❌ Failed to connect to MySQL after 10 attempts"
          exit 1
          
      - name: Prepare Database
        run: |
          php artisan migrate:fresh --seed --force
          
      - name: Show Directory Structure
        run: |
          ls -la
          ls -la storage/
          
      - name: Run PHPUnit Tests
        run: |
          php artisan test --coverage-clover=coverage.xml
          
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage.xml
          fail_ci_if_error: false
          verbose: true
          
      - name: Run Static Analysis
        if: always()
        run: |
          composer require --dev nunomaduro/larastan
          ./vendor/bin/phpstan analyse --memory-limit=2G
