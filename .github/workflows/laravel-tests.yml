name: Laravel Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  laravel-tests:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: myukm_test
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, mysql, pdo_mysql, bcmath, gd, intl, json, xml, ctype, fileinfo, tokenizer, xmlwriter, iconv, exif, gmp, imagick
        coverage: none
        tools: composer:v2

    - name: Install Dependencies
      run: |
        # Install dependencies
        composer install --no-interaction --ignore-platform-reqs --prefer-dist
        
    - name: Configure Environment for Testing
      run: |
        # Copy from .env.example as base
        copy .env.example .env
        
        # Override specific testing configurations for Windows
        (Get-Content .env) -replace 'APP_ENV=local', 'APP_ENV=testing' | Set-Content .env
        (Get-Content .env) -replace 'DB_DATABASE=myukm', 'DB_DATABASE=myukm_test' | Set-Content .env
        (Get-Content .env) -replace 'DB_PASSWORD=', 'DB_PASSWORD=secret' | Set-Content .env
        (Get-Content .env) -replace 'CACHE_DRIVER=database', 'CACHE_DRIVER=array' | Set-Content .env
        (Get-Content .env) -replace 'SESSION_DRIVER=database', 'SESSION_DRIVER=array' | Set-Content .env
        
        # Generate application key
        php artisan key:generate --force
        
        # Clear any cached config
        php artisan optimize:clear
        
    - name: Run Database Migrations
      run: |
        # Clear all caches
        php artisan cache:clear
        php artisan config:clear
        php artisan route:clear
        php artisan view:clear
        php artisan optimize:clear
        
        # Run fresh migrations
        php artisan migrate:fresh --force
      
    - name: Check Database Connection
      run: |
        php artisan tinker --execute="
        try {
            \DB::connection()->getPdo();
            echo 'Database connection successful';
        } catch (\Exception \$e) {
            echo 'Database connection failed: ' . \$e->getMessage();
            exit(1);
        }"
        
    - name: Seed Test Data
      run: |
        php artisan db:seed --force
        
    - name: List Routes for Debugging
      run: |
        php artisan route:list --compact
        
    - name: Run Tests with Verbose Output
      env:
        APP_ENV: testing
        DB_CONNECTION: mysql
        DB_DATABASE: myukm_test
        DB_USERNAME: root
        DB_PASSWORD: secret
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        CACHE_DRIVER: array
        SESSION_DRIVER: array
        QUEUE_CONNECTION: sync
      run: |
        # Run tests with more verbose output and continue on failure
        php artisan test --verbose --stop-on-failure || true
        
        # Show failed tests summary
        echo "=== Failed Tests Summary ==="
        php artisan test --verbose 2>&1 | grep -A5 -B5 "FAILED\|ERROR" || true
        
    - name: Check Application Status
      run: |
        # Check if application can boot
        php artisan about
        
        # Check for any configuration issues
        php artisan config:show database
        
    - name: Capture Test Results
      if: always()
      run: |
        echo "=== Test Environment Info ==="
        php --version
        php artisan --version
        
        echo "=== Database Tables ==="
        php artisan tinker --execute="
        \$tables = \DB::select('SHOW TABLES');
        foreach(\$tables as \$table) {
            \$tableName = array_values((array)\$table)[0];
            \$count = \DB::table(\$tableName)->count();
            echo \$tableName . ': ' . \$count . ' rows' . PHP_EOL;
        }"
